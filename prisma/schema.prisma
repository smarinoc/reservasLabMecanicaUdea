generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  profileId     String?
  rol           Rol       @default(user)
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Reserve       Reserve[]
}

model Profile {
  id           String  @id @default(cuid())
  userId       String? @unique
  user         User?   @relation(fields: [userId], references: [id])
  email        String  @unique
  state        State   @default(authorized)
  documentType String?
  document     String?
  userType     String?
  phoneNumber  String?
}

enum Rol {
  admin
  user
}

enum State {
  authorized
  registered
  disabled
}

model Machine {
  id              String        @id @default(cuid())
  name            String
  image           String?
  description     String?
  recommendations String[]
  machineUnits    MachineUnit[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model MachineUnit {
  id                     String                  @id @default(cuid())
  machineId              String
  machine                Machine                 @relation(fields: [machineId], references: [id])
  location               String
  count                  Int
  machineUnitsOnSchedule MachineUnitOnSchedule[]
}

model Diary {
  id            String     @id @default(cuid())
  name          String
  machinesCount String
  schedules     Schedule[]
}

model Schedule {
  id                     String                  @id @default(cuid())
  day                    String
  hour                   String
  Diary                  Diary?                  @relation(fields: [diaryId], references: [id])
  diaryId                String?
  machineUnitsOnSchedule MachineUnitOnSchedule[]
}

model MachineUnitOnSchedule {
  id             String      @id @default(cuid())
  machineUnit    MachineUnit @relation(fields: [machineUnitId], references: [id])
  schedule       Schedule    @relation(fields: [scheduleId], references: [id])
  machineUnitId  String
  scheduleId     String
  countAvailable Int
  Reserve        Reserve[]
}

model Reserve {
  id                      String                @id @default(cuid())
  machineUnitOnSchedule   MachineUnitOnSchedule @relation(fields: [machineUnitOnScheduleId], references: [id])
  machineUnitOnScheduleId String
  user                    User                  @relation(fields: [userId], references: [id])
  userId                  String
  state                   String                @default("Reserved")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
