generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  profileId     String?
  rol           Rol           @default(user)
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  reservation   Reservation[]
}

model Profile {
  id           String       @id @default(cuid())
  userId       String?      @unique
  user         User?        @relation(fields: [userId], references: [id])
  email        String       @unique
  state        ProfileState @default(habilitado)
  documentType String?
  document     String?
  userType     String?
  phoneNumber  String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

enum Rol {
  admin
  user
}

enum ProfileState {
  habilitado
  registrado
  inhabilitado
}

model Machine {
  id              String        @id @default(cuid())
  name            String
  image           String?
  description     String?
  recommendations String[]
  amount          Int
  machineUnits    MachineUnit[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model MachineUnit {
  id                     String                  @id @default(cuid())
  machineId              String
  machine                Machine                 @relation(fields: [machineId], references: [id])
  location               String
  state                  MachineUnitState        @default(habilitada)
  machineUnitsOnSchedule MachineUnitOnSchedule[]
  diaries                Diary[]
  serial                 String
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  reservation            Reservation[]
}

enum MachineUnitState {
  habilitada
  mantenimiento
  inhabilitada
}

model Diary {
  id                    String                  @id @default(cuid())
  name                  String
  machinesCount         String
  schedules             Schedule[]
  machineUnits          MachineUnit[]
  reservations          Reservation[]
  state                 DiaryState              @default(habilitado)
  firstDate             DateTime
  lastDate              DateTime
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  MachineUnitOnSchedule MachineUnitOnSchedule[]
}

enum DiaryState {
  habilitado
  finalizado
  inhabilitado
}

model Schedule {
  id                     String                  @id @default(cuid())
  day                    String
  hour                   String
  diaries                Diary[]
  machineUnitsOnSchedule MachineUnitOnSchedule[]
  reservation            Reservation[]
}

model MachineUnitOnSchedule {
  id            String                     @id @default(cuid())
  machineUnit   MachineUnit                @relation(fields: [machineUnitId], references: [id])
  schedule      Schedule                   @relation(fields: [scheduleId], references: [id])
  machineUnitId String
  scheduleId    String
  state         MachineUnitOnScheduleState @default(available)
  diary         Diary                      @relation(fields: [diaryId], references: [id])
  diaryId       String

  @@unique([machineUnitId, scheduleId])
}

enum MachineUnitOnScheduleState {
  available
  busy
  disabled
}

model Reservation {
  id            String           @id @default(cuid())
  schedule      Schedule         @relation(fields: [scheduleId], references: [id])
  machineUnit   MachineUnit      @relation(fields: [machineUnitId], references: [id])
  user          User             @relation(fields: [userId], references: [id])
  userId        String
  date          DateTime
  state         ReservationState @default(reservada)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  scheduleId    String
  machineUnitId String
  Diary         Diary?           @relation(fields: [diaryId], references: [id])
  diaryId       String?
}

enum ReservationState {
  reservada
  cancelada
  completada
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
